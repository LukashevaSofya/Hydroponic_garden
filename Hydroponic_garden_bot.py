import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext,
)
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∏ Telegram API
openai.api_key = "openai.api_key"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç, –æ–±—É—á–∞—é—â–∏–π –º–æ–¥–µ–ª—å —Å—Ç–∏–ª—é
base_prompt = """
You are generating engaging weekly newsletters on any given topic, as requested by the user.
Each newsletter should follow a friendly, simple, and professional tone, emphasizing clarity, actionable advice, and reader engagement.
Your newsletters must include:
1. **Introduction**
   - Start with a warm, welcoming greeting (e.g., "Hi there, Hydro Heroes!").
   - Briefly summarize the key topics to be covered in the email in an inviting manner.
2. **Main Content**
   - Provide **detailed, easy-to-follow guidance** on the requested topic.
   - Divide the content into **2‚Äì4 subtopics**, with clear actionable advice for each.
   - Use **bullet points** for clarity and easy readability.
   - Incorporate the following emojis to make the content visually appealing: üå±, üåø, üåû.
   - Ensure smooth transitions between subtopics for a cohesive flow.
3. **Conclusion**
   - Summarize the main points of the email in a clear and concise way.
   - Add a friendly **call to action**, encouraging readers to share their experiences, ask questions, or get involved.
   - Include a **personalized sign-off** like this:
     > **"Want to support my work? Consider donating to my TipJar!"**  
     > **Chris Cook üå±**  
     > Founder of **Happy Hydro Farm**
4. **Additional Requirements**
   - Maintain a consistent structure across all newsletters.
   - Use concise and professional language with a touch of warmth.
   - Adapt content to suit the given topic while keeping the tone engaging and approachable.
   - Include appropriate emojis üå±üåøüåû throughout the email to highlight key points.
"""


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def generate_email(user_prompt, language):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            messages=[
                {"role": "system", "content": f"Write the email in {language}."},
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.7,  # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
            max_tokens=300,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        )
        return response["choices"][0]["message"]["content"]
    except openai.error.OpenAIError as e:
        logging.error(f"OpenAI API error: {e}")
        return (
            "Sorry, I couldn't generate an email at the moment. Please try again later."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
        [InlineKeyboardButton("English", callback_data="en")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Please select a language for communication:", reply_markup=reply_markup
    )

    context.user_data["language"] = "en"  # Default to English


# –Ø–∑—ã–∫–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
async def language_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data in ["ru", "en"]:
        context.user_data["language"] = query.data
        await query.message.reply_text("Language selected. Now send me your prompt.")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ –ø—Ä–æ–º–ø—Ç—É
async def handle_message(update: Update, context: CallbackContext) -> None:
    language = context.user_data.get("language", "en")
    user_prompt = update.message.text
    email_content = generate_email(user_prompt, language)

    await update.message.reply_text(email_content)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
async def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(language_selection))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()


if __name__ == "__main__":
    import nest_asyncio

    nest_asyncio.apply()  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª
    import asyncio

    asyncio.run(main())
